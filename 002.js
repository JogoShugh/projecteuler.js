//Even Fibonacci numbers
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var R = require('ramda');

var f = function f(seed) {
  if (seed[0] > 4000000) return false;

  var current = seed[0];
  var next = seed[0] + seed[1];
  var nextSeed = [seed[1], next];

  return [current, nextSeed];
};

var fibonacci = _regeneratorRuntime.mark(function fibonacci() {
  var pre, cur, temp;
  return _regeneratorRuntime.wrap(function fibonacci$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pre = 0, cur = 1;

      case 1:
        temp = pre;

        pre = cur;
        cur += temp;
        context$1$0.next = 6;
        return cur;

      case 6:
        context$1$0.next = 1;
        break;

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, fibonacci, this);
});

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(fibonacci()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var i = _step.value;

    if (i > 4000000) break;
    console.log(i);
  }

  //let result = R.unfold(f, [0, 1]); //=> [-10, -20, -30, -40, -50]
  //console.log(result);
  //
  //  let printResult() =
  //      let fibonacci = Seq.unfold (fun (current, next) -> Some(current, (next, current + next))) (0, 1)
  //
  //      let result =
  //          fibonacci
  //          |> Seq.takeWhile (fun n -> n < 4000000)
  //          |> Seq.filter (fun x -> Helpers.isEven x)
  //          |> Seq.reduce (fun x y -> x + y)
  //      printf "result is: %d" result
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}
